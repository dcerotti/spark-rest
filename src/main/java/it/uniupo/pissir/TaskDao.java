package it.uniupo.pissir;

import it.uniupo.pissir.utils.DBConnect;

import java.sql.*;
import java.util.LinkedList;
import java.util.List;

/**
 * The DAO for the {@code Task} class.
 * @author <a href="mailto:luigi.derussis@uniupo.it">Luigi De Russis</a>
 * @version 1.2 (04/04/2019)
 */
public class TaskDao {

    /**
     * Get all tasks from the DB
     * @return a list of task, or an empty list if no tasks are available
     */
    public List<Task> getAllTasks() {
        final String sql = "SELECT id, description, urgent FROM tasks";

        List<Task> tasks = new LinkedList<>();

        try {
            Connection conn = DBConnect.getInstance().getConnection();
            PreparedStatement st = conn.prepareStatement(sql);

            ResultSet rs = st.executeQuery();

            while (rs.next()) {

                Task t = new Task(rs.getInt("id"), rs.getString("description"), rs.getInt("urgent"));
                tasks.add(t);
            }
            st.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return tasks;
    }

    /**
     * Get a single task from the DB
     * @param id of the task to retrieve
     * @return the task, or null if not found
     */
    public Task getTask(int id)
    {
        Task task = null;
        final String sql = "SELECT description, urgent FROM tasks WHERE id = ?";

        try {
            Connection conn = DBConnect.getInstance().getConnection();
            PreparedStatement st = conn.prepareStatement(sql);
            st.setInt(1, id);

            ResultSet rs = st.executeQuery();

            while (rs.next()) {

                task = new Task(id, rs.getString("description"), rs.getInt("urgent"));
            }

            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return task;
    }

    /**
     * Add a new task into the DB
     * @param newTask the task to be added
     * @return the new task with autogenerated id
     */
    public Task addTask(Task newTask) {
        final String sql = "INSERT INTO tasks(description, urgent) VALUES (?, ?)";
        ResultSet rs;

        try {
            Connection conn = DBConnect.getInstance().getConnection();
            PreparedStatement st = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            st.setString(1, newTask.getDescription());
            st.setInt(2, newTask.getUrgent());

            st.executeUpdate();
            rs = st.getGeneratedKeys();
            newTask.setId(rs.getInt(1));

            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return newTask;
    }

    /**
     * Delete a task in the DB
     * @param id the id of the task to be deleted
     */
    public int deleteTask(int id) {
/*        final String sql = "DELETE FROM tasks WHERE id = "+ id;*/
        final String sql = "DELETE FROM tasks WHERE id = ?";
        int exitval=0;

        try {
            Connection conn = DBConnect.getInstance().getConnection();
            PreparedStatement st = conn.prepareStatement(sql);
            st.setInt(1, id);
            exitval = st.executeUpdate();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return exitval;
    }
}
